{"version":3,"sources":["../server/server.js"],"names":["require","mongooseUniqueValidator","ObjectId","ObjectID","sourceMapSupport","install","express","bodyParser","app","qpm","mongodb","processQuery","autoDetect","fieldPattern","dataType","converters","objectId","use","json","get","req","res","post","new_rider","Rider","body","save","then","rider","console","log","message","status","error","send","new_sacco","Sacco","sacco","err","find","riders_id","params","id","findById","_id","create","result","insertedId","added_rider","put","findByIdAndUpdate","updated_rider","findByIdAndRemove","mongoose","connect","useNewUrlParser","listen"],"mappings":";;AAAA;;AAEA;;AACA;;AA+BA;;;;;;;;;;AA7BAA,OAAO,CAAC,gBAAD,CAAP,C,CAEA;;;AACA,IAAMC,uBAAuB,GAAGD,OAAO,CAAC,2BAAD,CAAvC;;AAEA,IAAME,QAAQ,GAAGF,OAAO,CAAC,SAAD,CAAP,CAAmBG,QAApC;;AAEAC,6BAAiBC,OAAjB;;AAEA,IAAMC,OAAO,GAAGN,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMO,UAAU,GAAGP,OAAO,CAAC,aAAD,CAA1B,C,CAEA;;;AACA,IAAMQ,GAAG,GAAGF,OAAO,EAAnB,C,CAEA;AACA;;AAEA,IAAIG,GAAG,GAAGT,OAAO,CAAC,oBAAD,CAAjB;;AACA,IAAIU,OAAO,GAAGV,OAAO,CAAC,SAAD,CAArB;;AAEA,IAAIW,YAAY,GAAGF,GAAG,CAAC;AACrBG,EAAAA,UAAU,EAAE,CAAC;AAAEC,IAAAA,YAAY,EAAE,MAAhB;AAAwBC,IAAAA,QAAQ,EAAE;AAAlC,GAAD,CADS;AAErBC,EAAAA,UAAU,EAAE;AAAEC,IAAAA,QAAQ,EAAEN,OAAO,CAACP;AAApB;AAFS,CAAD,CAAtB;AAKAK,GAAG,CAACS,GAAJ,CAAQV,UAAU,CAACW,IAAX,EAAR,E,CAEA;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAV,GAAG,CAACW,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzBA,EAAAA,GAAG,CAACH,IAAJ;AACD,CAFD;AAIAV,GAAG,CAACc,IAAJ,gBAAwB,UAACF,GAAD,EAAMC,GAAN,EAAc;AACpC,MAAME,SAAS,GAAG,IAAIC,eAAJ,CAAUJ,GAAG,CAACK,IAAd,CAAlB;AACAF,EAAAA,SAAS,CACNG,IADH,GAEGC,IAFH,CAEQ,UAAAC,KAAK,EAAI;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEC,MAAAA,OAAO;AAAT,KAAZ;AACAV,IAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBd,IAAhB,CAAqB;AAAEU,MAAAA,KAAK,EAALA;AAAF,KAArB;AACD,GALH,WAMS,UAAAK,KAAK,EAAI;AACdZ,IAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AAAEH,MAAAA,OAAO,qCAA8BE,KAA9B;AAAT,KAArB;AACD,GARH;AASD,CAXD;AAaAzB,GAAG,CAACc,IAAJ,gBAAwB,UAACF,GAAD,EAAMC,GAAN,EAAc;AACpCQ,EAAAA,OAAO,CAACC,GAAR,CAAYV,GAAG,CAACK,IAAhB;AACA,MAAMU,SAAS,GAAG,IAAIC,eAAJ,CAAUhB,GAAG,CAACK,IAAd,CAAlB,CAFoC,CAGpC;;AACAU,EAAAA,SAAS,CACNT,IADH,GAEGC,IAFH,CAEQ,UAAAU,KAAK,EAAI;AACbR,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEC,MAAAA,OAAO;AAAT,KAAZ;AACAV,IAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBd,IAAhB,CAAqB;AAAEmB,MAAAA,KAAK,EAALA;AAAF,KAArB;AACD,GALH,WAMS,UAAAC,GAAG,EAAI;AACZjB,IAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AAAEH,MAAAA,OAAO,qCAA8BO,GAA9B;AAAT,KAArB;AACD,GARH;AASD,CAbD;AAeA;;AACA9B,GAAG,CAACW,GAAJ,CAAQ,aAAR,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnCG,kBAAMe,IAAN,GACGZ,IADH,CACQ,UAAAC,KAAK,EAAI;AACb,QAAI,CAACA,KAAL,EACEP,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBd,IAAhB,CAAqB;AAAEa,MAAAA,OAAO;AAAT,KAArB,EADF,KAEKV,GAAG,CAACH,IAAJ,CAASU,KAAT;AACN,GALH,WAMS,UAAAK,KAAK,EAAI;AACdJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACAZ,IAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBd,IAAhB,CAAqB;AAAEa,MAAAA,OAAO,mCAA4BE,KAA5B;AAAT,KAArB;AACD,GATH;AAUD,CAXD;AAaA;;AACAzB,GAAG,CAACW,GAAJ,CAAQ,gBAAR,EAA0B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACtC,MAAImB,SAAJ;;AACA,MAAI;AACFA,IAAAA,SAAS,GAAG,IAAItC,QAAJ,CAAakB,GAAG,CAACqB,MAAJ,CAAWC,EAAxB,CAAZ;AACD,GAFD,CAEE,OAAOT,KAAP,EAAc;AACdZ,IAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AAAEH,MAAAA,OAAO,8BAAuBS,SAAvB;AAAT,KAArB;AACD;;AACDhB,kBAAMmB,QAAN,CAAe;AAAEC,IAAAA,GAAG,EAAEJ;AAAP,GAAf,EACGb,IADH,CACQ,UAAAC,KAAK,EAAI;AACb,QAAI,CAACA,KAAL,EACEP,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBd,IAAhB,CAAqB;AAAEa,MAAAA,OAAO,2BAAoBS,SAApB;AAAT,KAArB,EADF,KAEKnB,GAAG,CAACH,IAAJ,CAASU,KAAT;AACN,GALH,WAMS,UAAAK,KAAK,EAAI;AACdJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACAZ,IAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBd,IAAhB,CAAqB;AAAEa,MAAAA,OAAO,mCAA4BE,KAA5B;AAAT,KAArB;AACD,GATH;;AAUA;AACD,CAlBD;AAoBA;;AACAzB,GAAG,CAACc,IAAJ,CAAS,YAAT,EAAuB,UAACF,GAAD,EAAMC,GAAN,EAAc;AACnC,MAAIE,SAAS,GAAGH,GAAG,CAACK,IAApB;;AACAD,kBAAMqB,MAAN,CAAatB,SAAb,EACGI,IADH,CACQ,UAAAmB,MAAM,EAAI;AACdtB,oBAAMmB,QAAN,CAAe;AAAEC,MAAAA,GAAG,EAAEE,MAAM,CAACC;AAAd,KAAf,EAA2CpB,IAA3C,CAAgD,UAAAqB,WAAW,EAAI;AAC7D3B,MAAAA,GAAG,CAACH,IAAJ,CAAS8B,WAAT;AACD,KAFD;AAGD,GALH,WAMS,UAAAf,KAAK,EAAI;AACdJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACAZ,IAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBd,IAAhB,CAAqB;AAAEa,MAAAA,OAAO,mCAA4BE,KAA5B;AAAT,KAArB;AACD,GATH;AAUD,CAZD;AAcA;;AACAzB,GAAG,CAACyC,GAAJ,CAAQ,gBAAR,EAA0B,UAAC7B,GAAD,EAAMC,GAAN,EAAc;AACtC,MAAImB,SAAJ;;AACA,MAAI;AACFA,IAAAA,SAAS,GAAG,IAAItC,QAAJ,CAAakB,GAAG,CAACqB,MAAJ,CAAWC,EAAxB,CAAZ;AACD,GAFD,CAEE,OAAOT,KAAP,EAAc;AACdZ,IAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AAAEH,MAAAA,OAAO,8BAAuBS,SAAvB;AAAT,KAArB;AACD;;AACD,MAAMjB,SAAS,GAAGH,GAAG,CAACK,IAAtB;;AAEAD,kBAAM0B,iBAAN,CAAwB;AAAEN,IAAAA,GAAG,EAAEJ;AAAP,GAAxB,EAA4CjB,SAA5C,EACGgB,IADH,CACQ;AAAEK,IAAAA,GAAG,EAAEJ;AAAP,GADR,EAEGb,IAFH,CAEQ,UAAAwB,aAAa,EAAI;AACrB9B,IAAAA,GAAG,CAACH,IAAJ,CAASiC,aAAT;AACD,GAJH,WAKS,UAAAb,GAAG,EAAI;AACZT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACAjB,IAAAA,GAAG,CACAW,MADH,CACU,GADV,EAEGd,IAFH,CAEQ;AAAEa,MAAAA,OAAO,oDAA6CO,GAA7C;AAAT,KAFR;AAGD,GAVH;AAWD,CApBD;AAsBA;;AACA9B,GAAG,UAAH,CAAW,gBAAX,EAA6B,UAACY,GAAD,EAAMC,GAAN,EAAc;AACzC,MAAImB,SAAJ;;AACA,MAAI;AACFA,IAAAA,SAAS,GAAG,IAAItC,QAAJ,CAAakB,GAAG,CAACqB,MAAJ,CAAWC,EAAxB,CAAZ;AACD,GAFD,CAEE,OAAOT,KAAP,EAAc;AACdZ,IAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AAAEH,MAAAA,OAAO,8BAAuBS,SAAvB;AAAT,KAArB;AACD,GANwC,CAOzC;;;AACAhB,kBAAM4B,iBAAN,CAAwB;AAAER,IAAAA,GAAG,EAAEJ;AAAP,GAAxB,EAA4CpB,GAAG,CAACK,IAAhD,EACGE,IADH,CACQ,UAAAmB,MAAM,EAAI;AACdzB,IAAAA,GAAG,CAACH,IAAJ,CAAS4B,MAAT;AACD,GAHH,WAIS,UAAAR,GAAG,EAAI;AACZT,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEC,MAAAA,OAAO,kDAA2CO,GAA3C;AAAT,KAAZ;AACD,GANH;AAOD,CAfD,E,CAiBA;;AAEAe,qBACGC,OADH,CACW,qCADX,EACkD;AAAEC,EAAAA,eAAe,EAAE;AAAnB,CADlD,EAEG5B,IAFH;AAAA;AAAA;AAAA;AAAA,wBAEQ;AAAA;AAAA;AAAA;AAAA;AACJnB,UAAAA,GAAG,CAACgD,MAAJ,CAAW,IAAX,EAAiB,YAAM;AACrB3B,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACD,WAFD;;AADI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAFR","sourcesContent":["import sourceMapSupport from \"source-map-support\";\n// import queryString from 'query-String'\nimport { MongoClient } from \"mongodb\";\nimport mongoose from \"mongoose\";\nimport { Schema } from \"mongoose\";\nrequire(\"babel-polyfill\");\n\n// UNIQUE VALIDATOR\nconst mongooseUniqueValidator = require(\"mongoose-unique-validator\");\n\nconst ObjectId = require(\"mongodb\").ObjectID;\n\nsourceMapSupport.install();\n\nconst express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\n\n// an instance of express\nconst app = express();\n\n// mounting other middlewares into our server.js\n//app.use(express.static(\"static\"));\n\nvar qpm = require(\"query-params-mongo\");\nvar mongodb = require(\"mongodb\");\n\nvar processQuery = qpm({\n  autoDetect: [{ fieldPattern: /_id$/, dataType: \"objectId\" }],\n  converters: { objectId: mongodb.ObjectID }\n});\n\napp.use(bodyParser.json());\n\n// mongoose models\nimport { Sacco, Rider } from \"./db.models.js\";\n// OUR SERVER CODE WILL GO HERE\n\n// BASIC CRUD APIS\n\n// app.get(\"/api/sacco\", (req, res) => {\n//   db.collection(\"sacco\")\n//     .find()\n//     .then(sacco => {\n//       res.json({ sacco });\n//     })\n//     .catch(error => {\n//       console.log(error);\n//       res.status(500).json({ message: `Internal Server Error: ${error}` });\n//     });\n// });\n\napp.get(\"/\", (req, res) => {\n  res.json(`this is our first server page`);\n});\n\napp.post(`/api/riders`, (req, res) => {\n  const new_rider = new Rider(req.body);\n  new_rider\n    .save()\n    .then(rider => {\n      console.log({ message: `The rider was added successfully` });\n      res.status(200).json({ rider });\n    })\n    .catch(error => {\n      res.status(400).send({ message: `Unable to add the rider: ${error}` });\n    });\n});\n\napp.post(`/api/saccos`, (req, res) => {\n  console.log(req.body);\n  const new_sacco = new Sacco(req.body);\n  // if (!new_sacco._id) new_sacco._id = Schema.Types.ObjectId;\n  new_sacco\n    .save()\n    .then(sacco => {\n      console.log({ message: `The sacco was added successfully` });\n      res.status(200).json({ sacco });\n    })\n    .catch(err => {\n      res.status(400).send({ message: `Unable to add the sacco: ${err}` });\n    });\n});\n\n/* GET ALL RIDERS */\napp.get(\"/api/riders\", (req, res) => {\n  Rider.find()\n    .then(rider => {\n      if (!rider)\n        res.status(404).json({ message: `No avilable Riders in the system` });\n      else res.json(rider);\n    })\n    .catch(error => {\n      console.log(error);\n      res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n});\n\n/* GET SINGLE RIDER BY ID */\napp.get(\"api/riders/:id\", (req, res) => {\n  let riders_id;\n  try {\n    riders_id = new ObjectId(req.params.id);\n  } catch (error) {\n    res.status(400).send({ message: `Invalid riders ID:${riders_id}` });\n  }\n  Rider.findById({ _id: riders_id })\n    .then(rider => {\n      if (!rider)\n        res.status(404).json({ message: `No such Rider: ${riders_id}` });\n      else res.json(rider);\n    })\n    .catch(error => {\n      console.log(error);\n      res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n  0;\n});\n\n/* SAVE RIDERS */\napp.post(\"api/riders\", (req, res) => {\n  let new_rider = req.body;\n  Rider.create(new_rider)\n    .then(result => {\n      Rider.findById({ _id: result.insertedId }).then(added_rider => {\n        res.json(added_rider);\n      });\n    })\n    .catch(error => {\n      console.log(error);\n      res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n});\n\n/* UPDATE PRODUCT */\napp.put(\"api/riders/:id\", (req, res) => {\n  let riders_id;\n  try {\n    riders_id = new ObjectId(req.params.id);\n  } catch (error) {\n    res.status(400).send({ message: `Invalid riders ID:${riders_id}` });\n  }\n  const new_rider = req.body;\n\n  Rider.findByIdAndUpdate({ _id: riders_id }, new_rider)\n    .find({ _id: riders_id })\n    .then(updated_rider => {\n      res.json(updated_rider);\n    })\n    .catch(err => {\n      console.log(err);\n      res\n        .status(500)\n        .json({ message: `Unable to update the riders information ${err}` });\n    });\n});\n\n/* DELETE PRODUCT */\napp.delete(\"api/riders/:id\", (req, res) => {\n  let riders_id;\n  try {\n    riders_id = new ObjectId(req.params.id);\n  } catch (error) {\n    res.status(400).send({ message: `Invalid riders ID:${riders_id}` });\n  }\n  // THE REQ.BODY IS OPTIONAL INTHE FINDBYIDANREMOVE METHOD\n  Rider.findByIdAndRemove({ _id: riders_id }, req.body)\n    .then(result => {\n      res.json(result);\n    })\n    .catch(err => {\n      console.log({ message: `Unable to delelete the riders profile ${err}` });\n    });\n});\n\n//creating a connection to mongoose\n\nmongoose\n  .connect(\"mongodb://127.0.0.1:27017/fika-safe\", { useNewUrlParser: true })\n  .then(async () => {\n    app.listen(3000, () => {\n      console.log(\"Listening on port 3000\");\n    });\n  });\n"],"file":"server.js"}